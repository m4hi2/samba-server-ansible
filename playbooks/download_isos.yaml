---
- name: Download Linux ISOs to Samba Public Share
  hosts: smb
  become: true
  vars:
    samba_share_path: /srv/samba/public
  tasks:
    - name: Check if Samba is installed
      ansible.builtin.command: which smbd
      register: samba_installed
      changed_when: false
      failed_when: samba_installed.rc != 0

    - name: Ensure Samba share directory exists
      ansible.builtin.file:
        path: "{{ samba_share_path }}"
        state: directory
        owner: nobody
        group: nogroup
        mode: "0755"

    - name: Ensure Ubuntu OS directory exists
      ansible.builtin.file:
        path: "{{ samba_share_path }}/ubuntu"
        state: directory
        owner: nobody
        group: nogroup
        mode: "0755"

    - name: Ensure Debian OS directory exists
      ansible.builtin.file:
        path: "{{ samba_share_path }}/debian"
        state: directory
        owner: nobody
        group: nogroup
        mode: "0755"

    - name: Ensure AlmaLinux directory exists
      ansible.builtin.file:
        path: "{{ samba_share_path }}/alma"
        state: directory
        owner: nobody
        group: nogroup
        mode: "0755"

    - name: Ensure Gparted directory exists
      ansible.builtin.file:
        path: "{{ samba_share_path }}/gparted"
        state: directory
        owner: nobody
        group: nogroup
        mode: "0755"

    - name: Ensure Proxmox directory exists
      ansible.builtin.file:
        path: "{{ samba_share_path }}/proxmox"
        state: directory
        owner: nobody
        group: nogroup
        mode: "0755"

    - name: Ensure Utils directory exists
      ansible.builtin.file:
        path: "{{ samba_share_path }}/utils"
        state: directory
        owner: nobody
        group: nogroup
        mode: "0755"

    - name: Check if Ubuntu ISO exists
      ansible.builtin.stat:
        path: "{{ samba_share_path }}/ubuntu/{{ item | basename }}"
      register: ubuntu_iso_stat
      loop:
        - "https://mirror.xeonbd.com/ubuntu-releases/24.04.2/ubuntu-24.04.2-desktop-amd64.iso"
        - "https://mirror.xeonbd.com/ubuntu-releases/24.04.2/ubuntu-24.04.2-live-server-amd64.iso"
        - "https://mirror.xeonbd.com/ubuntu-releases/24.10/ubuntu-24.10-desktop-amd64.iso"
        - "https://mirror.xeonbd.com/ubuntu-releases/24.10/ubuntu-24.10-live-server-amd64.iso"

    - name: Download Ubuntu ISO if it doesn't exist
      ansible.builtin.get_url:
        url: "{{ item }}"
        dest: "{{ samba_share_path }}/ubuntu/{{ item | basename }}"
        mode: "0644"
        owner: nobody
        group: nogroup
      loop: "{{ ubuntu_iso_stat.results | selectattr('stat.exists', 'equalto', false) | map(attribute='item') | list }}"
      async: 3600
      poll: 0
      register: ubuntu_download

    - name: Check if Debian ISO exists
      ansible.builtin.stat:
        path: "{{ samba_share_path }}/debian/{{ item | basename }}"
      register: debian_iso_stat
      loop:
        - "https://cdimage.debian.org/debian-cd/current/amd64/iso-cd/debian-12.9.0-amd64-netinst.iso"

    - name: Download Debian ISO if it doesn't exist
      ansible.builtin.get_url:
        url: "{{ item }}"
        dest: "{{ samba_share_path }}/debian/{{ item | basename }}"
        mode: "0644"
        owner: nobody
        group: nogroup
      loop: "{{ debian_iso_stat.results | selectattr('stat.exists', 'equalto', false) | map(attribute='item') | list }}"
      async: 3600
      poll: 0
      register: debian_download

    - name: Check if AlmaLinux ISO exists
      ansible.builtin.stat:
        path: "{{ samba_share_path }}/alma/{{ item | basename }}"
      register: alma_iso_stat
      loop:
        - "https://mirror.xeonbd.com/almalinux/9.5/isos/x86_64/AlmaLinux-9-latest-x86_64-minimal.iso"

    - name: Download AlmaLinux ISO if it doesn't exist
      ansible.builtin.get_url:
        url: "{{ item }}"
        dest: "{{ samba_share_path }}/alma/{{ item | basename }}"
        mode: "0644"
        owner: nobody
        group: nogroup
      loop: "{{ alma_iso_stat.results | selectattr('stat.exists', 'equalto', false) | map(attribute='item') | list }}"
      async: 3600
      poll: 0
      register: alma_download

    - name: Check if Gparted ISO exists
      ansible.builtin.stat:
        path: "{{ samba_share_path }}/gparted/{{ item | basename }}"
      register: gparted_iso_stat
      loop:
        - "https://downloads.sourceforge.net/gparted/gparted-live-1.7.0-1-amd64.iso"

    - name: Download Gparted ISO if it doesn't exist
      ansible.builtin.get_url:
        url: "{{ item }}"
        dest: "{{ samba_share_path }}/gparted/{{ item | basename }}"
        mode: "0644"
        owner: nobody
        group: nogroup
      loop: "{{ gparted_iso_stat.results | selectattr('stat.exists', 'equalto', false) | map(attribute='item') | list }}"
      async: 3600
      poll: 0
      register: gparted_download

    - name: Check if Proxmox ISO exists
      ansible.builtin.stat:
        path: "{{ samba_share_path }}/proxmox/{{ item | basename }}"
      register: proxmox_iso_stat
      loop:
        - "https://enterprise.proxmox.com/iso/proxmox-ve_8.3-1.iso"

    - name: Download Proxmox ISO if it doesn't exist
      ansible.builtin.get_url:
        url: "{{ item }}"
        dest: "{{ samba_share_path }}/proxmox/{{ item | basename }}"
        mode: "0644"
        owner: nobody
        group: nogroup
      loop: "{{ proxmox_iso_stat.results | selectattr('stat.exists', 'equalto', false) | map(attribute='item') | list }}"
      async: 3600
      poll: 0
      register: proxmox_download

    - name: Check if Utils exists
      ansible.builtin.stat:
        path: "{{ samba_share_path }}/utils/{{ item | basename }}"
      register: utils_stat
      loop:
        - "http://smb-bd1.metrovps.com/HDSentinel"

    - name: Download Utils if it doesn't exist
      ansible.builtin.get_url:
        url: "{{ item }}"
        dest: "{{ samba_share_path }}/utils/{{ item | basename }}"
        mode: "0644"
        owner: nobody
        group: nogroup
      loop: "{{ utils_stat.results | selectattr('stat.exists', 'equalto', false) | map(attribute='item') | list }}"
      async: 3600
      poll: 0
      register: utils_download

    - name: Merge async jobs into a single list
      ansible.builtin.set_fact:
        async_jobs: >
          {{
          ubuntu_download.results | map(attribute='ansible_job_id') | list +
          debian_download.results | map(attribute='ansible_job_id') | list +
          alma_download.results | map(attribute='ansible_job_id') | list +
          gparted_download.results | map(attribute='ansible_job_id') | list +
          proxmox_download.results | map(attribute='ansible_job_id') | list +
          utils_download.results | map(attribute='ansible_job_id') | list
          }}

    - name: Wait for all downloads to finish
      ansible.builtin.async_status:
        jid: "{{ item }}"
      loop: "{{ async_jobs }}"
      register: job_result
      until: job_result.finished
      retries: 300
      delay: 60
